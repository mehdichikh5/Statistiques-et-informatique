from random import *
import math

# Variables globales :
nbParties = 1000
epsilonEGreedy = 0.3
nbLevier = 10
tabRendementReel = []
for i in range(0,nbLevier):
	tabRendementReel.append(random())


# Retourne le résultat de l'action du levier at
def gainBinaire(tabRendementReel,at):
	alea = random()

	if alea < tabRendementReel[at]:
		return 1
	else:
		return 0


# Renvoi un levier aléatoire
def coupAleatoire(tabRendement):
	return randint(0,len(tabRendement) - 1)


def algoAleatoire(tabRendement,nbCoupsLevier):
	gainTotal = 0
	for _ in range(0,nbParties):
		gainTotal += gainBinaire(tabRendementReel,coupAleatoire(tabRendement))

	return gainTotal


# Renvoi un levier selon l'algorithme greedy
def coupGreedy(tabRendement):
	rendementMax = -1
	for i in range(0,len(tabRendement)):

		nbWin = 0
		nbTotal = 0
		for val in tabRendement[i]:
			nbWin += val
			nbTotal += 1 

		if nbTotal:
			rendement = (nbWin*1.0/nbTotal)
			
			if rendement > rendementMax:
				rendementMax = rendement
				meilleurLevier = i

	return meilleurLevier	

def algoGreedy(tabRendement,nbCoupsLevier):
	nbPartiesExploration = nbParties//10
	nbPartiesExploitation = nbParties - nbPartiesExploration

	gainTotal = 0
	# Exploration :
	for _ in range(0,nbPartiesExploration):
		at = randint(0,len(tabRendement) - 1)
		gain = gainBinaire(tabRendementReel,at)
		tabRendement[at].append(gain)
		gainTotal += gain

	# Exploitation :
	meilleurLevier = coupGreedy(tabRendement)
	for _ in range(0,nbPartiesExploitation):
		gainTotal += gainBinaire(tabRendementReel,meilleurLevier)

	return gainTotal

# Renvoi un levier selon l'algorithme Egreedy
def coupEGreedy(tabRendement):
	if random() < epsilonEGreedy:
		# Exploration
		at = randint(0,len(tabRendement) - 1)
	else:
		at = coupGreedy(tabRendement)

	return at

def algoEGreedy(tabRendement,nbCoupsLevier):
	nbPartiesExploration = nbParties//10
	nbPartiesRestantes = nbParties - nbPartiesExploration

	gainTotal = 0
	# Exploration initiale (optionnel)
	for _ in range(0,nbPartiesExploration):
		at = randint(0,len(tabRendement) - 1)
		gain = gainBinaire(tabRendementReel,at)
		tabRendement[at].append(gain)
		gainTotal += gain


	for _ in range(0,nbPartiesRestantes):
		meilleurLevier = coupEGreedy(tabRendement)
		gain = gainBinaire(tabRendementReel,meilleurLevier)
		gainTotal += gain
		tabRendement[meilleurLevier].append(gain) # On met à jour sa connaissance des rendements


	return gainTotal

# Renvoi un levier selon l'algorithme UCB
def coupUCB(tabRendement,nbCoupsLevier,nbPartiesCourantes):
	at = -1
	argmax = -1
	for i in range(0,nbLevier):

		# On fait le rendement moyen de notre levier
		nbWin = 0
		nbTotal = 0
		for val in tabRendement[i]:
			nbWin += val
			nbTotal += 1

		rendement = (nbWin*1.0/nbCoupsLevier[i])

		if argmax < rendement + math.sqrt((2* math.log(nbPartiesCourantes))/nbCoupsLevier[i]):
			argmax = rendement + math.sqrt((2* math.log(nbPartiesCourantes))/nbCoupsLevier[i])
			at = i

	return at


def algoUCB(tabRendement,nbCoupsLevier):
	# On fait une première phase pour tirer chaque levier au moins une fois 
	for at in range(0,nbLevier):
		tabRendement[at].append(gainBinaire(tabRendementReel,at))
		nbCoupsLevier[at] += 1

	# On exécute l'algo UCB
	gainTotal = 0
	for n in range(nbLevier,nbParties):
		meilleurLevier = coupUCB(tabRendement,nbCoupsLevier,n)
		nbCoupsLevier[meilleurLevier] += 1
		gain = gainBinaire(tabRendementReel,meilleurLevier)
		gainTotal += gain
		tabRendement[meilleurLevier].append(gain) # On met à jour sa connaissance des rendements

	return gainTotal


def main():
	# Initialisation des tableaux
	tabRendement = []
	for i in range(0,nbLevier):
		tabRendement.append([])
	nbCoupsLevier = []
	for i in range(0,nbLevier):
			nbCoupsLevier.append(0)

	# On compare les différents algos
	gainTotal1 = algoAleatoire(tabRendement,nbCoupsLevier)
	print("Gain total aléatoire : ",gainTotal1)
	gainTotal2 = algoGreedy(tabRendement,nbCoupsLevier)
	print("Gain total greedy : ",gainTotal2)
	gainTotal3 = algoEGreedy(tabRendement,nbCoupsLevier)
	print("Gain total Egreedy : ",gainTotal3)
	gainTotal4 = algoUCB(tabRendement,nbCoupsLevier)
	print("Gain total UCB : ",gainTotal4)

	 #Calcul du meilleur levier
	maxRendement = -1
	for i in range(0,len(tabRendementReel)):
		if tabRendementReel[i] > maxRendement:
			maxRendement = tabRendementReel[i]
			meilleurLevier = i

	#Calcul du gain optimal
	gainTotal4 = 0
	for i in range(0,nbParties):
		gainTotal4 += gainBinaire(tabRendementReel,meilleurLevier)

	print("Gain total optimal : ",gainTotal4)

main()